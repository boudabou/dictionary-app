{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","components/table.jsx","index.js"],"names":["module","exports","__webpack_require__","p","Component","Boolean","window","location","hostname","match","selectRowProp","mode","cellEditProps","blurToSave","EditColumnClassTable","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","conflicts","onAfterDeleteRow","bind","assertThisInitialized","onAfterInsertRow","domainValidator","rangeValidator","formatter","domainFormatter","rangeFormatter","idFormatter","val","type","react_default","a","createElement","style","color","fontSize","colour","cell","row","conf","column","value","domain","importance","range","id","rowKeys","newData","entry","indexOf","push","newState","setState","domains","ranges","response","isValid","notification","msg","title","Fragment","lib","cellEdit","insertRow","search","options","afterInsertRow","afterDeleteRow","deleteRow","selectRow","dataField","isKey","dataFormat","editable","validator","numTables","document","getElementById","onclick","className","appendChild","ReactDOM","render","onClick","element","parentNode","removeChild","table","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8260d71d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\nimport { BootstrapTable, TableHeaderColumn } from \"react-bootstrap-table\";\nimport \"../../node_modules/react-bootstrap-table/dist/react-bootstrap-table-all.min.css\";\n\nconst selectRowProp = {\n  mode: \"checkbox\"\n};\n\nconst cellEditProps = {\n  mode: \"click\",\n  blurToSave: true\n};\n\nclass EditColumnClassTable extends Component {\n  state = {\n    data: [\n      /*{\n        id: \"0\",\n        domain: \"d1\",\n        range: \"r1\"\n      },\n      { id: \"1\", domain: \"d2\", range: \"r2\" },\n      { id: \"2\", domain: \"d3\", range: \"r3\" },\n      { id: \"3\", domain: \"d4\", range: \"r4\" },\n      { id: \"4\", domain: \"d5\", range: \"r5\" }*/\n    ],\n    conflicts: []\n  };\n\n  formatter(val, type) {\n    if (type === \"normal\") {\n      return (\n        <div>\n          <strong style={{ color: \"grey\", fontSize: 14 }}>{val}</strong>\n        </div>\n      );\n    } else {\n      let colour = \"grey\";\n      if (type === \"special1\") colour = \"#ffaa00\";\n      if (type === \"special2\") colour = \"red\";\n      return (\n        <div>\n          <strong style={{ color: colour, fontSize: 20 }}>{val}</strong>\n        </div>\n      );\n    }\n  }\n\n  domainFormatter(cell, row) {\n    for (var conf in this.state.conflicts) {\n      if (\n        this.state.conflicts[conf].column === \"domain\" &&\n        this.state.conflicts[conf].value === row.domain\n      ) {\n        return this.formatter(\n          row.domain,\n          \"special\" + this.state.conflicts[conf].importance\n        );\n      }\n    }\n    return this.formatter(row.domain, \"normal\");\n  }\n\n  rangeFormatter(cell, row) {\n    for (var conf in this.state.conflicts) {\n      if (\n        this.state.conflicts[conf].column === \"range\" &&\n        this.state.conflicts[conf].value === row.range\n      ) {\n        return this.formatter(\n          row.range,\n          \"special\" + this.state.conflicts[conf].importance\n        );\n      }\n    }\n    return this.formatter(row.range, \"normal\");\n  }\n\n  idFormatter(cell, row) {\n    return this.formatter(row.id, \"normal\");\n  }\n  onAfterDeleteRow(rowKeys) {\n    var newData = [];\n    for (var entry in this.state.data) {\n      let idx = rowKeys.indexOf(this.state.data[entry].id);\n      if (idx === -1) {\n        newData.push(this.state.data[entry]);\n      }\n    }\n    let newState = this.state;\n    newState.data = newData;\n    this.setState(newState);\n  }\n\n  onAfterInsertRow(row) {\n    let newState = this.state;\n    newState.data.push(row);\n    this.setState(newState);\n  }\n\n  rangeValidator(value, row) {\n    const newState = this.state;\n    newState.conflicts = [];\n    this.setState(newState);\n\n    const domains = [];\n    const ranges = [];\n    for (var entry in this.state.data) {\n      if (!(row.id === this.state.data[entry].id)) {\n        domains.push(this.state.data[entry].domain);\n        ranges.push(this.state.data[entry].range);\n      }\n    }\n    const response = {\n      isValid: true,\n      notification: { type: \"success\", msg: \"\", title: \"\", importance: 0 },\n      conflicts: []\n    };\n    if (!value) {\n      response.isValid = false;\n      response.notification.type = \"error\";\n      response.notification.msg = \"Value must be inserted\";\n      response.notification.title = \"Requested Value\";\n      response.notification.importance = 1;\n    } else {\n      const index = domains.indexOf(value);\n      if (index > -1) {\n        response.isValid = false;\n        response.notification.type = \"error\";\n        response.notification.msg =\n          \"The range \" + value + \" chains with an existing domain\";\n        response.notification.title = \"Chain error\";\n        response.notification.importance = 2;\n        this.state.conflicts.push({\n          value: value,\n          column: \"domain\",\n          importance: response.notification.importance\n        });\n      }\n    }\n    this.setState(this.state);\n\n    return response;\n  }\n\n  domainValidator(value, row) {\n    const newState = this.state;\n    newState.conflicts = [];\n    this.setState(newState);\n\n    const domains = [];\n    const ranges = [];\n    for (var entry in this.state.data) {\n      if (!(row.id === this.state.data[entry].id)) {\n        domains.push(this.state.data[entry].domain);\n        ranges.push(this.state.data[entry].range);\n      }\n    }\n    const response = {\n      isValid: true,\n      notification: { type: \"success\", msg: \"\", title: \"\", importance: 0 },\n      conflicts: []\n    };\n    if (!value) {\n      response.isValid = false;\n      response.notification.type = \"error\";\n      response.notification.msg = \"Value must be inserted\";\n      response.notification.title = \"Requested Value\";\n      response.notification.importance = 1;\n    } else {\n      const index = domains.indexOf(value);\n      if (index > -1) {\n        response.isValid = false;\n        response.notification.type = \"error\";\n        response.notification.msg = \"The entred domain alreay exists\";\n        response.notification.title = \"Duplicated domain \" + value;\n        response.notification.importance = 1;\n        this.state.conflicts.push({\n          value: value,\n          column: \"domain\",\n          importance: response.notification.importance\n        });\n      } else {\n        let index = ranges.indexOf(value);\n        if (index > -1) {\n          response.isValid = false;\n          response.notification.type = \"error\";\n          response.notification.msg =\n            \"The domain \" + value + \" chains with an existing range\";\n          response.notification.title = \"Chain error\";\n          response.notification.importance = 2;\n          this.state.conflicts.push({\n            value: value,\n            column: \"range\",\n            importance: response.notification.importance\n          });\n        }\n      }\n    }\n    this.setState(this.state);\n\n    return response;\n  }\n\n  constructor() {\n    super();\n    this.onAfterDeleteRow = this.onAfterDeleteRow.bind(this);\n    this.onAfterInsertRow = this.onAfterInsertRow.bind(this);\n    this.domainValidator = this.domainValidator.bind(this);\n    this.rangeValidator = this.rangeValidator.bind(this);\n    this.formatter = this.formatter.bind(this);\n    this.domainFormatter = this.domainFormatter.bind(this);\n    this.rangeFormatter = this.rangeFormatter.bind(this);\n    this.idFormatter = this.idFormatter.bind(this);\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <BootstrapTable\n          data={this.state.data}\n          cellEdit={cellEditProps}\n          insertRow={true}\n          search={true}\n          options={{\n            afterInsertRow: this.onAfterInsertRow,\n            afterDeleteRow: this.onAfterDeleteRow\n          }}\n          deleteRow={true}\n          selectRow={selectRowProp}\n        >\n          <TableHeaderColumn dataField=\"id\" isKey dataFormat={this.idFormatter}>\n            ID\n          </TableHeaderColumn>\n          <TableHeaderColumn\n            dataField=\"domain\"\n            dataFormat={this.domainFormatter}\n            editable={{ validator: this.domainValidator }}\n          >\n            Domain\n          </TableHeaderColumn>\n          <TableHeaderColumn\n            dataField=\"range\"\n            editable={{ validator: this.rangeValidator }}\n            dataFormat={this.rangeFormatter}\n          >\n            Range\n          </TableHeaderColumn>\n        </BootstrapTable>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default EditColumnClassTable;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport EditColumnClassTable from \"./components/table\";\n\nvar numTables = 1;\n\ndocument.getElementById(\"addTableButton\").onclick = addEntry;\n\nfunction addEntry() {\n  numTables += 1;\n  var cell = document.createElement(\"div\");\n  cell.className = \"grid-item\";\n  cell.id = numTables;\n  document.getElementById(\"grid\").appendChild(cell);\n  ReactDOM.render(\n    <div>\n      <div className=\"button-div\">\n        <button\n          type=\"button\"\n          className=\"btn btn-default btn-xs\"\n          onClick={() => {\n            var element = document.getElementById(cell.id);\n            element.parentNode.removeChild(element);\n          }}\n        >\n          &#x274C;\n        </button>\n      </div>\n      <div>\n        <EditColumnClassTable />\n      </div>\n    </div>,\n    document.getElementById(numTables)\n  );\n}\n\nserviceWorker.unregister();\n"],"sourceRoot":""}